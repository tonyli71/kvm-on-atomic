heat_template_version: 2014-10-16
description: 'Upgrade for Pacemaker deployments'

parameters:

  controller_servers:
    type: json
  compute_servers:
    type: json
  blockstorage_servers:
    type: json
  objectstorage_servers:
    type: json
  cephstorage_servers:
    type: json
  input_values:
    type: json
    description: input values for the software deployments

  UpgradeInitCommand:
    type: string
    description: |
      Command or script snippet to run on all overcloud nodes to
      initialize the upgrade process. E.g. a repository switch.
    default: ''
  UpgradeLevelNovaCompute:
    type: string
    description: Nova Compute upgrade level
    default: ''

  # downstream only
  rhel_reg_activation_key:
    type: string
    description: RHN activation key
    default: ''
  rhel_reg_sat_url:
    type: string
    description: RHN server URL
    default: ''

resources:

  # For the UpgradeInit also rename /etc/resolv.conf.save for +bug/1567004

  UpgradeInitConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template:
            list_join:
            - ''
            - - "#!/bin/bash\n\n"
              - "if [[ -f /etc/resolv.conf.save ]] ; then rm /etc/resolv.conf.save; fi\n\n"
              - get_param: UpgradeInitCommand
          params:
            _RHEL_REG_ACTIVATION_KEY_: {get_param: rhel_reg_activation_key}
            _RHEL_REG_SAT_URL_: {get_param: rhel_reg_sat_url}

  UpgradeInitControllerDeployment:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      servers:  {get_param: controller_servers}
      config: {get_resource: UpgradeInitConfig}
      input_values: {get_param: input_values}

  UpgradeInitComputeDeployment:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      servers:  {get_param: compute_servers}
      config: {get_resource: UpgradeInitConfig}
      input_values: {get_param: input_values}

  UpgradeInitBlockStorageDeployment:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      servers:  {get_param: blockstorage_servers}
      config: {get_resource: UpgradeInitConfig}
      input_values: {get_param: input_values}

  UpgradeInitObjectStorageDeployment:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      servers:  {get_param: objectstorage_servers}
      config: {get_resource: UpgradeInitConfig}
      input_values: {get_param: input_values}

  UpgradeInitCephStorageDeployment:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      servers:  {get_param: cephstorage_servers}
      config: {get_resource: UpgradeInitConfig}
      input_values: {get_param: input_values}

  # TODO(jistr): for Mitaka->Newton upgrades and further we can use
  # map_merge with input_values instead of feeding params into scripts
  # via str_replace on bash snippets

  ComputeDeliverUpgradeScriptConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        list_join:
        - ''
        - - str_replace:
              template: |
                #!/bin/bash
                upgrade_level_nova_compute='UPGRADE_LEVEL_NOVA_COMPUTE'
              params:
                UPGRADE_LEVEL_NOVA_COMPUTE: {get_param: UpgradeLevelNovaCompute}
          - get_file: major_upgrade_compute.sh

  ComputeDeliverUpgradeScriptDeployment:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      servers:  {get_param: compute_servers}
      config: {get_resource: ComputeDeliverUpgradeScriptConfig}
      input_values: {get_param: input_values}

  ObjectStorageDeliverUpgradeScriptConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: {get_file: major_upgrade_object_storage.sh}

  ObjectStorageDeliverUpgradeScriptDeployment:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      servers:  {get_param: objectstorage_servers}
      config: {get_resource: ObjectStorageDeliverUpgradeScriptConfig}
      input_values: {get_param: input_values}

  CephStorageDeliverUpgradeScriptConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: {get_file: major_upgrade_ceph_storage.sh}

  CephStorageDeliverUpgradeScriptDeployment:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      servers:  {get_param: cephstorage_servers}
      config: {get_resource: CephStorageDeliverUpgradeScriptConfig}
      input_values: {get_param: input_values}
