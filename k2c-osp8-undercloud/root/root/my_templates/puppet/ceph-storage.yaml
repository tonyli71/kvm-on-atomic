heat_template_version: 2015-04-30
description: 'OpenStack ceph storage node configured by Puppet'
parameters:
  Flavor:
    description: Flavor for the Ceph Storage node.
    type: string
    constraints:
      - custom_constraint: nova.flavor
  Image:
    type: string
    default: overcloud-ceph-storage
    constraints:
      - custom_constraint: glance.image
  ImageUpdatePolicy:
    default: 'REBUILD_PRESERVE_EPHEMERAL'
    description: What policy to use when reconstructing instances. REBUILD for rebuilds, REBUILD_PRESERVE_EPHEMERAL to preserve /mnt.
    type: string
  KeyName:
    description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    type: string
    default: default
    constraints:
      - custom_constraint: nova.keypair
  NtpServer:
    default: ''
    description: Comma-separated list of ntp servers
    type: comma_delimited_list
  EnablePackageInstall:
    default: 'false'
    description: Set to true to enable package installation via Puppet
    type: boolean
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  TimeZone:
    default: 'UTC'
    description: The timezone to be set on Ceph nodes.
    type: string
  UpdateIdentifier:
    default: ''
    type: string
    description: >
      Setting to a previously unused value during stack-update will trigger
      package update on all nodes
  Hostname:
    type: string
    default: '' # Defaults to Heat created hostname
  HostnameMap:
    type: json
    default: {}
    description: Optional mapping to override hostnames
  ExtraConfig:
    default: {}
    description: |
      Additional hiera configuration to inject into the cluster. Note
      that CephStorageExtraConfig takes precedence over ExtraConfig.
    type: json
  CephStorageExtraConfig:
    default: {}
    description: |
      Role specific additional hiera configuration to inject into the cluster.
    type: json
  CephStorageIPs:
    default: {}
    type: json
  NetworkDeploymentActions:
    type: comma_delimited_list
    description: >
      Heat action when to apply network configuration changes
    default: ['CREATE']
  ServerMetadata:
    default: {}
    description: >
      Extra properties or metadata passed to Nova for the created nodes in
      the overcloud. It's accessible via the Nova metadata API.
    type: json
  SoftwareConfigTransport:
    default: POLL_SERVER_CFN
    description: |
      How the server should receive the metadata required for software configuration.
    type: string
    constraints:
    - allowed_values: [POLL_SERVER_CFN, POLL_SERVER_HEAT, POLL_TEMP_URL, ZAQAR_MESSAGE]
  CloudDomain:
    default: ''
    type: string
    description: >
      The DNS domain used for the hosts. This should match the dhcp_domain
      configured in the Undercloud neutron. Defaults to localdomain.
  SchedulerHints:
    type: json
    description: Optional scheduler hints to pass to nova
    default: {}
  NodeIndex:
    type: number
    default: 0

resources:
  CephStorage:
    type: OS::Nova::Server
    properties:
      image: {get_param: Image}
      image_update_policy: {get_param: ImageUpdatePolicy}
      flavor: {get_param: Flavor}
      key_name: {get_param: KeyName}
      networks:
        - network: ctlplane
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: UserData}
      name:
        str_replace:
            template: {get_param: Hostname}
            params: {get_param: HostnameMap}
      software_config_transport: {get_param: SoftwareConfigTransport}
      metadata: {get_param: ServerMetadata}
      scheduler_hints: {get_param: SchedulerHints}

  # Combine the NodeAdminUserData and NodeUserData mime archives
  UserData:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: NodeAdminUserData}
        type: multipart
      - config: {get_resource: NodeUserData}
        type: multipart

  # Creates the "heat-admin" user if configured via the environment
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NodeAdminUserData:
    type: OS::TripleO::NodeAdminUserData

  # For optional operator additional userdata
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NodeUserData:
    type: OS::TripleO::NodeUserData

  ExternalPort:
    type: OS::TripleO::CephStorage::Ports::ExternalPort
    properties:
      ControlPlaneIP: {get_attr: [CephStorage, networks, ctlplane, 0]}
      IPPool: {get_param: CephStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  InternalApiPort:
    type: OS::TripleO::CephStorage::Ports::InternalApiPort
    properties:
      ControlPlaneIP: {get_attr: [CephStorage, networks, ctlplane, 0]}
      IPPool: {get_param: CephStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  StoragePort:
    type: OS::TripleO::CephStorage::Ports::StoragePort
    properties:
      ControlPlaneIP: {get_attr: [CephStorage, networks, ctlplane, 0]}
      IPPool: {get_param: CephStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  StorageMgmtPort:
    type: OS::TripleO::CephStorage::Ports::StorageMgmtPort
    properties:
      ControlPlaneIP: {get_attr: [CephStorage, networks, ctlplane, 0]}
      IPPool: {get_param: CephStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  TenantPort:
    type: OS::TripleO::CephStorage::Ports::TenantPort
    properties:
      ControlPlaneIP: {get_attr: [CephStorage, networks, ctlplane, 0]}
      IPPool: {get_param: CephStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  ManagementPort:
    type: OS::TripleO::CephStorage::Ports::ManagementPort
    properties:
      ControlPlaneIP: {get_attr: [CephStorage, networks, ctlplane, 0]}
      IPPool: {get_param: CephStorageIPs}
      NodeIndex: {get_param: NodeIndex}

  NetworkConfig:
    type: OS::TripleO::CephStorage::Net::SoftwareConfig
    properties:
      ControlPlaneIp: {get_attr: [CephStorage, networks, ctlplane, 0]}
      ExternalIpSubnet: {get_attr: [ExternalPort, ip_subnet]}
      InternalApiIpSubnet: {get_attr: [InternalApiPort, ip_subnet]}
      StorageIpSubnet: {get_attr: [StoragePort, ip_subnet]}
      StorageMgmtIpSubnet: {get_attr: [StorageMgmtPort, ip_subnet]}
      TenantIpSubnet: {get_attr: [TenantPort, ip_subnet]}
      ManagementIpSubnet: {get_attr: [ManagementPort, ip_subnet]}

  NetIpMap:
    type: OS::TripleO::Network::Ports::NetIpMap
    properties:
      ControlPlaneIp: {get_attr: [CephStorage, networks, ctlplane, 0]}
      ExternalIp: {get_attr: [ExternalPort, ip_address]}
      ExternalIpUri: {get_attr: [ExternalPort, ip_address_uri]}
      InternalApiIp: {get_attr: [InternalApiPort, ip_address]}
      InternalApiIpUri: {get_attr: [InternalApiPort, ip_address_uri]}
      StorageIp: {get_attr: [StoragePort, ip_address]}
      StorageIpUri: {get_attr: [StoragePort, ip_address_uri]}
      StorageMgmtIp: {get_attr: [StorageMgmtPort, ip_address]}
      StorageMgmtIpUri: {get_attr: [StorageMgmtPort, ip_address_uri]}
      TenantIp: {get_attr: [TenantPort, ip_address]}
      TenantIpUri: {get_attr: [TenantPort, ip_address_uri]}
      ManagementIp: {get_attr: [ManagementPort, ip_address]}
      ManagementIpUri: {get_attr: [ManagementPort, ip_address_uri]}

  NetIpSubnetMap:
    type: OS::TripleO::Network::Ports::NetIpSubnetMap
    properties:
      ControlPlaneIp: {get_attr: [CephStorage, networks, ctlplane, 0]}
      ExternalIpSubnet: {get_attr: [ExternalPort, ip_subnet]}
      InternalApiIpSubnet: {get_attr: [InternalApiPort, ip_subnet]}
      StorageIpSubnet: {get_attr: [StoragePort, ip_subnet]}
      StorageMgmtIpSubnet: {get_attr: [StorageMgmtPort, ip_subnet]}
      TenantIpSubnet: {get_attr: [TenantPort, ip_subnet]}
      ManagementIpSubnet: {get_attr: [ManagementPort, ip_subnet]}

  NetworkDeployment:
    type: OS::TripleO::SoftwareDeployment
    properties:
      name: NetworkDeployment
      config: {get_resource: NetworkConfig}
      server: {get_resource: CephStorage}
      actions: {get_param: NetworkDeploymentActions}

  CephStorageDeployment:
    type: OS::Heat::StructuredDeployment
    depends_on: NetworkDeployment
    properties:
      name: CephStorageDeployment
      config: {get_resource: CephStorageConfig}
      server: {get_resource: CephStorage}
      input_values:
        ntp_servers: {get_param: NtpServer}
        timezone: {get_param: TimeZone}
        enable_package_install: {get_param: EnablePackageInstall}
        enable_package_upgrade: {get_attr: [UpdateDeployment, update_managed_packages]}
        ceph_cluster_network: {get_attr: [NetIpSubnetMap, net_ip_subnet_map, {get_param: [ServiceNetMap, CephClusterNetwork]}]}
        ceph_public_network: {get_attr: [NetIpSubnetMap, net_ip_subnet_map, {get_param: [ServiceNetMap, CephPublicNetwork]}]}

  CephStorageConfig:
    type: OS::Heat::StructuredConfig
    properties:
      group: os-apply-config
      config:
        hiera:
          hierarchy:
            - '"%{::uuid}"'
            - heat_config_%{::deploy_config_name}
            - ceph_extraconfig
            - extraconfig
            - ceph_cluster # provided by CephClusterConfig
            - ceph
            - '"%{::osfamily}"'
            - common
          datafiles:
            common:
              raw_data: {get_file: hieradata/common.yaml}
            ceph_extraconfig:
              mapped_data: {get_param: CephStorageExtraConfig}
            extraconfig:
              mapped_data: {get_param: ExtraConfig}
            ceph:
              raw_data: {get_file: hieradata/ceph.yaml}
              mapped_data:
                ntp::servers: {get_input: ntp_servers}
                timezone::timezone: {get_input: timezone}
                tripleo::packages::enable_install: {get_input: enable_package_install}
                tripleo::packages::enable_upgrade: {get_input: enable_package_upgrade}
                ceph::profile::params::cluster_network: {get_input: ceph_cluster_network}
                ceph::profile::params::public_network: {get_input: ceph_public_network}

  # Resource for site-specific injection of root certificate
  NodeTLSCAData:
    depends_on: CephStorageDeployment
    type: OS::TripleO::NodeTLSCAData
    properties:
      server: {get_resource: CephStorage}

  # Hook for site-specific additional pre-deployment config, e.g extra hieradata
  CephStorageExtraConfigPre:
    depends_on: CephStorageDeployment
    type: OS::TripleO::CephStorageExtraConfigPre
    properties:
        server: {get_resource: CephStorage}

  # Hook for site-specific additional pre-deployment config,
  # applying to all nodes, e.g node registration/unregistration
  NodeExtraConfig:
    depends_on: [CephStorageExtraConfigPre, NodeTLSCAData]
    type: OS::TripleO::NodeExtraConfig
    properties:
        server: {get_resource: CephStorage}

  UpdateConfig:
    type: OS::TripleO::Tasks::PackageUpdate

  UpdateDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config: {get_resource: UpdateConfig}
      server: {get_resource: CephStorage}
      input_values:
        update_identifier:
          get_param: UpdateIdentifier

outputs:
  hosts_entry:
    value:
      str_replace:
        template: "IP HOST.DOMAIN HOST"
        params:
          IP: {get_attr: [NetIpMap, net_ip_map, {get_param: [ServiceNetMap, CephStorageHostnameResolveNetwork]}]}
          DOMAIN: {get_param: CloudDomain}
          HOST: {get_attr: [CephStorage, name]}
  nova_server_resource:
    description: Heat resource handle for the ceph storage server
    value:
      {get_resource: CephStorage}
  external_ip_address:
    description: IP address of the server in the external network
    value: {get_attr: [ExternalPort, ip_address]}
  internal_api_ip_address:
    description: IP address of the server in the internal_api network
    value: {get_attr: [InternalApiPort, ip_address]}
  storage_ip_address:
    description: IP address of the server in the storage network
    value: {get_attr: [StoragePort, ip_address]}
  storage_mgmt_ip_address:
    description: IP address of the server in the storage_mgmt network
    value: {get_attr: [StorageMgmtPort, ip_address]}
  tenant_ip_address:
    description: IP address of the server in the tenant network
    value: {get_attr: [TenantPort, ip_address]}
  management_ip_address:
    description: IP address of the server in the management network
    value: {get_attr: [ManagementPort, ip_address]}
  config_identifier:
    description: identifier which changes if the node configuration may need re-applying
    value:
      list_join:
      - ','
      - - {get_attr: [CephStorageDeployment, deploy_stdout]}
        - {get_attr: [NodeTLSCAData, deploy_stdout]}
        - {get_attr: [CephStorageExtraConfigPre, deploy_stdout]}
        - {get_param: UpdateIdentifier}
